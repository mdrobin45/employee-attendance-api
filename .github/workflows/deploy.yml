name: Deploy to VPS

on:
   push:
      branches:
         - main

env:
   NODE_VERSION: "20"
   DOCKER_COMPOSE_FILE: "docker-compose.yml"

jobs:
   test-and-build:
      runs-on: ubuntu-latest

      steps:
         - name: Checkout code
           uses: actions/checkout@v4

         - name: Setup Node.js
           uses: actions/setup-node@v4
           with:
              node-version: ${{ env.NODE_VERSION }}
              cache: "yarn"

         - name: Install dependencies
           run: yarn install --frozen-lockfile

         - name: Run linting
           run: yarn lint

         - name: Build application
           run: yarn build

         - name: Build Docker image
           run: docker build -t sellable-api:${{ github.sha }} .

   deploy:
      needs: test-and-build
      runs-on: ubuntu-latest
      if: success()

      steps:
         - name: Checkout code
           uses: actions/checkout@v4

         - name: Setup SSH
           run: |
              mkdir -p ~/.ssh
              echo "${{ secrets.VPS_PRIVATE_SSH_KEY }}" > ~/.ssh/id_rsa
              chmod 600 ~/.ssh/id_rsa
              ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

         - name: Copy files to VPS
           run: |
              rsync -avz --delete \
                --exclude='.git' \
                --exclude='node_modules' \
                --exclude='dist' \
                --exclude='coverage' \
                --exclude='.github' \
                ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:/var/www/api-zkteo/

         - name: Create .env file securely
           run: |
              ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
                cat > /var/www/api-zkteo/.env << "EOF"
              DATABASE_URL=${{ secrets.DATABASE_URL }}
              POSTGRES_DB=${{ secrets.POSTGRES_DB }}
              POSTGRES_USER=${{ secrets.POSTGRES_USER }}
              POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
              EOF
              '

         - name: Deploy to VPS
           run: |
              ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
                set -e
                
                cd /var/www/api-zkteo

                # Create backup of current deployment
                if [ -d "backup" ]; then
                  rm -rf backup
                fi
                mkdir -p backup
                
                # Backup current running containers
                if docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps -q | grep -q .; then
                  echo "Backing up current deployment..."
                  docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down
                  if [ -d "dist" ]; then
                    cp -r dist backup/
                  fi
                fi
                
                # Deploy new version
                echo "Deploying new version..."
                docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d --build
                
                # Wait for service to be ready
                echo "Waiting for service to start..."
                sleep 30
                
                # Check container status
                echo "Checking container status..."
                docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps
                
                # Check container logs for errors
                echo "Checking container logs..."
                docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} logs --tail=50
                
                # Health check
                echo "Performing health check..."
                max_attempts=3
                attempt=1
                
                while [ $attempt -le $max_attempts ]; do
                  echo "Health check attempt $attempt/$max_attempts"
                  
                  # Check if container is running
                  if ! docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} ps | grep -q "Up"; then
                    echo "‚ùå Container is not running"
                    docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} logs --tail=20
                  fi
                  
                  # Try health check
                  if curl -f http://localhost:4370 > /dev/null 2>&1; then
                    echo "‚úÖ Health check passed!"
                    break
                  else
                    echo "‚ùå Health check failed, attempt $attempt/$max_attempts"
                    echo "Trying to get more info..."
                    curl -v http://localhost:4370 || echo "Curl failed"
                    netstat -tlnp | grep 3000 || echo "Port 3000 not listening"
                    
                    if [ $attempt -eq $max_attempts ]; then
                      echo "üö® Health check failed after $max_attempts attempts. Rolling back..."
                      
                      # Rollback to previous version
                      docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} down
                      
                      if [ -d "backup/dist" ]; then
                        echo "Restoring from backup..."
                        rm -rf dist
                        cp -r backup/dist .
                        docker compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d --build
                        echo "‚úÖ Rollback completed"
                      else
                        echo "‚ùå No backup available for rollback"
                      fi
                      
                      exit 1
                    fi
                    
                    sleep 10
                    attempt=$((attempt + 1))
                  fi
                done
                
                # Cleanup old images
                echo "Cleaning up old Docker images..."
                docker image prune -f
                
                echo "‚úÖ Deployment completed successfully!"
              '

         - name: Notify deployment status
           if: always()
           run: |
              ssh -o StrictHostKeyChecking=no ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '
                cd /var/www/api-zkteo
                if [ "${{ job.status }}" == "success" ]; then
                  echo "‚úÖ Deployment successful at $(date)"
                else
                  echo "‚ùå Deployment failed at $(date)"
                fi
              '
